About:
    Playlist_db is a music RESTful Flask API designed for the safe and efficient storage of playlist data. I have created several endpoints 
  that allow users to add, remove, edit, and delete songs and playlists. I have implemented a doubly linked list data structure to handle 
  songs within both the “all songs” and “playlist songs” categories, allowing for swift and effective access to data and each node’s neighbors. 
  Additionally, I have implemented Merge Sort and binary search algorithms for smooth search and sort operations.

Data Input and End Points:

  Songs:
    Add Song:
      -http://127.0.0.1:5000/songs
      -method: Post

      {
        "title": (name of song),
        "artist": (name of artist)
        "duration": (duration of song in sec),
        "genre_id": (id of the genre)
      }

    All Songs:
      -http://127.0.0.1:5000/songs
      -method: Get

    Update Song:
      -http://127.0.0.1:5000/songs
      -method: Put

      {
        "title": (new name of song),
        "artist": (new name of artist)
        "duration": (new duration of song in sec),
        "genre_id": (new id of the genre)
      }

    Delete Song:
                                  (title of the song to delete)
      -http://127.0.0.1:5000/songs/title
      -method: Delete

    Get Song By Title:
                          (title of the song to delete)
      -http://127.0.0.1:5000/songs/title
      -method: Get

  Genre:
    Add Genre:
      -http://127.0.0.1:5000/genres
      -method: Post
      {
        "name": (name of genre)
      }

    All Genres:
      -http://127.0.0.1:5000/genres
      -method: Get

    Update Genre:
                                (genre id)
      -http://127.0.0.1:5000/genres/1
      -method: Put

      {
        "name": (name change)
      }

    Delete Genre:
                                (genre id)
      -http://127.0.0.1:5000/genres/1
      -method: Delete

  Playlist:
    Create Playlist:
      -http://127.0.0.1:5000/create-playlist
      -method: Post
      {
        "name": name to use,
        "songs": [
          {"song_id": 1},
          {"song_id": 2},
          {"song_id":3}
        ]
      }

    Playlist by Name:
      -http://127.0.0.1:5000/playlist/Daniels%20Playlist
      -method: Get

    All Playlists:
      -http://127.0.0.1:5000/playlists
      -method: Get

    Add Song to Playlist:
      -Use the playlist ID to target that playlist
      -method: Post
      http://127.0.0.1:5000/add-song/1
        input method
          {
            "songs":[
                {"song_id":3},
                {"song_id":9}
            ]
          }

    Sort Playlist:
                                            (name of playlist/sort by)
      http://127.0.0.1:5000/playlist-sorted/Daniel%20Playlist/artist

    Delete Song from Playlist:
      -Use the playlist ID to target that playlist
      -method: Delete
      http://127.0.0.1:5000/remove-song/1
      {
        "songs":[
            {"song_id":3},
            {"song_id":9}
        ]
      }
    
PIP Installs:
  -blinker                1.8.2
  -click                  8.1.7
  -colorama               0.4.6
  -Flask                  3.0.3
  -flask-marshmallow      1.2.1
  -Flask-SQLAlchemy       3.1.1
  -greenlet               3.0.3
  -itsdangerous           2.2.0
  -Jinja2                 3.1.4
  -MarkupSafe             2.1.5
  -marshmallow            3.22.0
  -marshmallow-sqlalchemy 1.1.0
  -mysql-connector-python 9.0.0
  -packaging              24.1
  -pip                    24.2
  -SQLAlchemy             2.0.32
  -typing_extensions      4.12.2
  -Werkzeug               3.0.4

Imports:
  -from flask import Flask,jsonify,request
  -from flask_marshmallow import Marshmallow
  -from flask_sqlalchemy import SQLAlchemy
  -from marshmallow import fields,validate, ValidationError
  -from sqlalchemy.orm import relationship

Time & Space Complexity:
  -Doubly Linked List: O(n) time and O(1) space
  -Merge Sort: O(n log n) time and O(n) space
  -Binary Search: O(log n) time and O(1) space

Questions:

  Problem Statement:
  Our goal is to develop a playlist management system that lets you create songs, create a playlist, and add songs and remove songs from that 
  playlist(s).

  Project Requirements

    Data Organization with Lists and Dictionaries:
      -Implement operations for managing playlists & songs.
      -Provide functionalities to add songs and create playlists
      -Ensure effective storage and retrieval of playlist information. We learned about a lot of algorithms to help efficiently manage these things. 
      -What might be useful to implement this? 

    Efficient Search and Sort Algorithms for Playlist Navigation:
      -Implement a search and sort algorithm for finding a song or sorting songs based off name, artist, or genre.
      -Analyze the time complexity and performance trade-offs of search and sort algorithms in playlist management.

    Building a Flask API for Playlist Access and Management:
      -Implement CRUD endpoints using Flask for managing playlists and songs.

      API endpoints:
      
        Song Endpoints:
          -Create Song
          -Update Song
          -Delete Song
          -Search/Get a Song

        Playlist Endpoints:
          -Create Playlist
          -Get Playlist
          -Update Playlist

        Delete Playlist:
          -Additional Endpoints:
          -Add song to Playlist
          -Remove song from Playlist
          -Sort songs in Playlist by song name, genre, and artist

  Additional Notes: 
    As stated before, you've learned about a lot of new algorithms and ways to handle data. How might some of those things you learned be of 
    use here? How might stacks or queues for removing songs from the beginning or end of a playlist be useful. How might something like a 
    linked list come in handy? What kind of efficient search or sort algorithms might help handle a playlist thousands long?